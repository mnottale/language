alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
operator =  @{ "+" | "-" | ">" | "<" | "/" | "*" | "%" | "=="}

number = @{ (digit)+ ~ ("." ~ (digit)+)?}
ident = @{ "%"? ~ alpha ~ (alpha | digit)* }

parametric = { "$" ~ ident}

exprlist = { expr ? ~ ("," ~ expr)* } 
identlist = {ident ? ~ ("," ~ ident)*}
assign = { identchain ~ "=" ~ expr }

vardecl = { "var" ~ ident ~ "=" ~ expr}

objdef = { ident ~ "{" ~ exprlist ~ "}" }

identchain = { ident ~ ( "." ~ ident)* }

array = { "[" ~ exprlist ~ "]" }

expr = { ( parametric | objdef | lambda | binary | number | identchain | array | ( "(" ~ expr ~ ")" )) ~ ( ("[" ~ expr ~ "]") | ("(" ~ exprlist ~ ")" ) | ("." ~ ident))* }

binary = { (number | identchain | ( "(" ~ expr ~ ")" )) ~ operator ~ expr }


statement = { parametric | vardecl | assign | IF | WHILE | FORINT | FORC | expr | block}
unary = _{ number | ident}
block = { "{" ~ (statement ~ ";")* ~ "}" }

memfuncdef = { "func" ~ ident ~ "::" ~ ident ~ "(" ~ identlist ~ ")" ~ block}
lambda = { "func" ~ "(" ~ identlist ~ ")" ~ block }
IF = { "if" ~ expr ~ block ~ ( "else" ~ block )?}
WHILE = { "while" ~ expr ~ block }
FORINT = { "forint" ~ ident ~ "in" ~ expr ~ block }
FORC   = { "for" ~ statement ~ ";" ~ expr ~ ";" ~ statement ~ block }
classdecl = { "class" ~ ident ~ "{" ~ ( ident ~ ";")* ~ "}" }


toplevel = { memfuncdef | assign | classdecl}

whitespace = _{ " " | "\t" | "\r" | "\n" }
