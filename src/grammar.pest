alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
operator =  @{ "+" | "-"}

number = @{ (digit)+ }
ident = @{ alpha ~ (alpha | digit)* }

assign = { ident ~ "=" ~ expr }
funccall = { ident ~ "(" ~ ")" }
expr = { binary | number | ident | ( "(" ~ expr ~ ")" ) | funccall }
statement = { funcdef | assign | binary | IF}
binary = { (unary | ( "(" ~ expr ~ ")" )) ~ operator ~ expr }
unary = _{ number | ident}
block = { "{" ~ (statement ~ ";")* ~ "}" }

funcdef = { "func" ~ ident ~ block}

IF = { "if" ~ expr ~ block }

whitespace = _{ " " | "\t" | "\r" | "\n" }