alpha = { 'a'..'z' | 'A'..'Z' }
digit = { '0'..'9' }
operator =  @{ "+" | "-" | ">"}

number = @{ (digit)+ }
ident = @{ alpha ~ (alpha | digit)* }

exprlist = { expr ? ~ ("," ~ expr)* } 
identlist = {ident ? ~ ("," ~ ident)*}
assign = { identchain ~ "=" ~ expr }

vardecl = { "var" ~ ident ~ "=" ~ expr}

objdef = { ident ~ "{" ~ exprlist ~ "}" }

identchain = { ident ~ ( "." ~ ident)* }

array = { "[" ~ exprlist ~ "]" }

expr = { (objdef | lambda | binary | number | identchain | array | ( "(" ~ expr ~ ")" )) ~ ( ("[" ~ expr ~ "]") | ("(" ~ exprlist ~ ")" ) | ("." ~ ident))* }

binary = { (number | identchain | ( "(" ~ expr ~ ")" )) ~ operator ~ expr }


statement = { vardecl | assign | IF | expr }
unary = _{ number | ident}
block = { "{" ~ (statement ~ ";")* ~ "}" }

funcdef = { "func" ~ ident ~ "(" ~ identlist ~ ")" ~ block}
lambda = { "func" ~ "(" ~ identlist ~ ")" ~ block }
IF = { "if" ~ expr ~ block ~ ( "else" ~ block )?}

classdecl = { "class" ~ ident ~ "{" ~ ( ident ~ ";")* ~ "}" }


toplevel = { funcdef | assign | classdecl}

whitespace = _{ " " | "\t" | "\r" | "\n" }